# simulate data from a quantile reg model

tau <- 0.5
n <- 500
omega.sq <- 2 / ( tau * (1-tau) )
xi <- 0.5 * omega.sq * (1-2*tau)

#x1 <- sort( rnorm(n) )
n0 <- floor(n*tau)
x2 <- c( rep(-1,n0), rep(1,n-n0)) #sort( sample(0:1, size=n, replace = T) )

X <- data.frame( x1=x2 )#, x2=x2 )
gamma <- c(0,1)

Xmat <- model.matrix( ~x1, X)
#meX <- apply(Xmat, 2, mean)
#sdX <- sqrt( apply(Xmat * Xmat, 2, sum) / n )
#Xmat <- t( ( t( Xmat ) - meX ) / sdX )
  
eta <- Xmat %*% gamma



pr <- 1 - dlcdfALD( -eta, tau, 0, 1 )

y <- rbinom( n, size=1, prob=pr )

fit <- distlag.mcmc( y, X, formula=NULL, tau )

# take the samps and get a predicted prob
pr.samp <- apply( 1 - cdfALD( -fit$eta, tau, 0, 1), 1, mean )

u <- data.frame(y=y, x1=x2)
fitqr <- bayesQR( y~x1, data=u, quantile = tau, ndraw=10^4, keep=1 )


z <- (2*y - 1)*1.0
v <- rep(1,n)
Xm <- model.matrix( ~x1, X )
mu <- colSums( Xm * (z/v - xi) / omega.sq)
P <- t(Xm) %*% ( diag(1/v) %*% Xm ) /omega.sq + diag(1/100, 2)
R <- chol(P); L <- t(R)
b <- rep(0,2)

muf <- solve( P, mu )

mu0 <- forwardsolve( L, b, k=2, transpose=T ) + muf

Xm %*% mu0


